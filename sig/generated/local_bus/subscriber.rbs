# Generated from lib/local_bus/subscriber.rb with RBS::Inline

class LocalBus
  # Wraps a Callable (Proc) and Message intended for asynchronous execution.
  class Subscriber
    # Custom error class for Subscriber errors
    class Error < StandardError
      # Constructor
      # @rbs message: String -- error message
      # @rbs cause: StandardError? -- underlying cause of the error
      def initialize: (String message, cause: StandardError?) -> untyped

      # Underlying cause of the error
      # @rbs return: StandardError?
      attr_reader cause: untyped
    end

    # Constructor
    # @rbs callable: #call -- the subscriber's callable object
    # @rbs message: Message -- the message to be processed
    def initialize: (untyped callable, Message message) -> untyped

    # Unique identifier for the subscriber
    # @rbs return: String
    attr_reader id: untyped

    # Source location of the callable
    # @rbs return: Array[String, Integer]?
    attr_reader source_location: untyped

    # Callable object -- Proc, lambda, etc. (must respond to #call)
    # @rbs return: #call
    attr_reader callable: untyped

    # Error if the subscriber fails (available after performing)
    # @rbs return: Error?
    attr_reader error: untyped

    # Message for the subscriber to process
    # @rbs return: Message
    attr_reader message: untyped

    # Metadata for the subscriber (available after performing)
    # @rbs return: Hash[Symbol, untyped]
    attr_reader metadata: untyped

    # Value returned by the callable (available after performing)
    # @rbs return: untyped
    attr_reader value: untyped

    # Indicates if the subscriber has been performed
    # @rbs return: bool
    def performed?: () -> bool

    # Checks if the subscriber is pending
    # @rbs return: bool
    def pending?: () -> bool

    # Performs the subscriber's callable
    # @rbs return: void
    def perform: () -> void

    # Handles timeout for the subscriber
    # @rbs cause: StandardError -- the cause of the timeout
    # @rbs return: void
    def timeout: (StandardError cause) -> void

    # Returns the subscriber's data as a hash
    # @rbs return: Hash[Symbol, untyped]
    def to_h: () -> Hash[Symbol, untyped]

    # Allows pattern matching on subscriber attributes
    # @rbs keys: Array[Symbol] -- keys to extract from the subscriber
    # @rbs return: Hash[Symbol, untyped]
    def deconstruct_keys: (Array[Symbol] keys) -> Hash[Symbol, untyped]

    private

    # Captures metadata for the subscriber's performance
    # @rbs return: void
    def with_metadata: () -> void
  end
end
