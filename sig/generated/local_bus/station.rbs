# Generated from lib/local_bus/station.rb with RBS::Inline

class LocalBus
  # The Station serves as a queuing system for messages, similar to a bus station where passengers wait for their bus.
  #
  # When a message is published to the Station, it is queued and processed at a later time, allowing for deferred execution.
  # This is particularly useful for tasks that can be handled later.
  #
  # The Station employs a thread pool to manage message processing, enabling high concurrency and efficient resource utilization.
  # Messages can also be prioritized, ensuring that higher-priority tasks are processed first.
  #
  # @note: While the Station provides a robust mechanism for background processing,
  #        it's important to understand that the exact timing of message processing is not controlled by the publisher,
  #        and messages will be processed as resources become available.
  class Station
    include MonitorMixin

    class CapacityError < StandardError
    end

    # Constructor
    #
    # @note Delays process exit in an attempt to flush the queue to avoid dropping messages.
    #       Exit flushing makes a "best effort" to process all messages, but it's not guaranteed.
    #       Will not delay process exit when the queue is empty.
    #
    # @rbs bus: Bus -- local message bus (default: Bus.new)
    # @rbs interval: Float -- queue polling interval in seconds (default: 0.01)
    # @rbs limit: Integer -- max queue size (default: 10_000)
    # @rbs threads: Integer -- number of threads to use (default: Etc.nprocessors)
    # @rbs timeout: Float -- seconds to wait for subscribers to process the message before cancelling (default: 60)
    # @rbs wait: Float -- seconds to wait for the queue to flush at process exit (default: 5)
    # @rbs return: void
    def initialize: (?bus: Bus, ?interval: Float, ?limit: Integer, ?threads: Integer, ?timeout: Float, ?wait: Float) -> void

    # Bus instance
    # @rbs return: Bus
    attr_reader bus: untyped

    # Queue polling interval in seconds
    # @rbs return: Float
    attr_reader interval: untyped

    # Max queue size
    # @rbs return: Integer
    attr_reader limit: untyped

    # Number of threads to use
    # @rbs return: Integer
    attr_reader threads: untyped

    # Default timeout for message processing (in seconds)
    # @rbs return: Float
    attr_reader timeout: untyped

    # Starts the station
    # @rbs interval: Float -- queue polling interval in seconds (default: 0.01)
    # @rbs threads: Integer -- number of threads to use (default: self.threads)
    # @rbs return: void
    def start: (?interval: Float, ?threads: Integer) -> void

    # Stops the station
    # @rbs timeout: Float -- seconds to wait for message processing before killing the thread pool (default: nil)
    # @rbs return: void
    def stop: (?timeout: Float) -> void

    def stopping?: () -> untyped

    # Indicates if the station is running
    # @rbs return: bool
    def running?: () -> bool

    # Indicates if the queue is empty
    # @rbs return: bool
    def empty?: () -> bool

    # Number of unprocessed messages in the queue
    # @rbs return: Integer
    def count: () -> Integer

    # Subscribe to a topic
    # @rbs topic: String -- topic name
    # @rbs callable: (Message) -> untyped -- callable that will process messages published to the topic
    # @rbs &block: (Message) -> untyped -- alternative way to provide a callable
    # @rbs return: self
    def subscribe: () { (Message) -> untyped } -> self

    # Unsubscribes a callable from a topic
    # @rbs topic: String -- topic name
    # @rbs callable: (Message) -> untyped -- subscriber that should no longer receive messages
    # @rbs return: self
    def unsubscribe: () -> self

    # Unsubscribes all subscribers from a topic and removes the topic
    # @rbs topic: String -- topic name
    # @rbs return: self
    def unsubscribe_all: () -> self

    # Publishes a message
    #
    # @rbs topic: String | Symbol -- topic name
    # @rbs priority: Integer -- priority of the message, higher number == higher priority (default: 1)
    # @rbs timeout: Float -- seconds to wait before cancelling
    # @rbs payload: Hash[Symbol, untyped] -- message payload
    # @rbs return: Message
    def publish: (String | Symbol topic, ?priority: Integer, ?timeout: Float, **untyped payload) -> Message

    # Publishes a pre-built message
    # @rbs message: Message -- message to publish
    # @rbs return: Message
    def publish_message: (Message message, ?priority: untyped) -> Message
  end
end
