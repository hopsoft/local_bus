# Generated from lib/local_bus/station.rb with RBS::Inline

class LocalBus
  # An in-process message queuing system that buffers and publishes messages to Bus.
  # This class acts as an intermediary, queuing messages internally before publishing them to the Bus.
  #
  # @note Station shares the same interface as Bus and is thus a message bus.
  #       The key difference is that Stations are multi-threaded and will not block the main thread.
  #
  # Three fallback policies are supported:
  # 1. `abort` - Raises an exception and discards the task when the queue is full (default)
  # 2. `discard` - Discards the task when the queue is full
  # 3. `caller_runs` - Executes the task on the calling thread when the queue is full,
  #                 This effectively jumps the queue (and blocks the main thread) but ensures the task is performed
  #
  # IMPORTANT: Be sure to release resources like database connections in subscribers when publishing via Station.
  class Station
    include MonitorMixin

    class QueueFullError < StandardError
    end

    # Constructor
    # @rbs bus: Bus -- local message bus (default: Bus.new)
    # @rbs interval: Float -- queue polling interval in seconds (default: 0.01)
    # @rbs size: Integer -- max queue size (default: 10_000)
    # @rbs threads: Integer -- number of threads to use (default: Etc.nprocessors)
    # @rbs timeout: Float -- seconds to wait for a published message to complete
    # @rbs return: void
    def initialize: (?bus: Bus, ?interval: Float, ?size: Integer, ?threads: Integer, ?timeout: Float) -> void

    # Bus instance
    # @rbs return: Bus
    attr_reader bus: untyped

    # Queue polling interval in seconds
    # @rbs return: Float
    attr_reader interval: untyped

    # Max queue size
    # @rbs return: Integer
    attr_reader size: untyped

    # Number of threads to use
    # @rbs return: Integer
    attr_reader threads: untyped

    # Default timeout for message processing (in seconds)
    # @rbs return: Float
    attr_reader timeout: untyped

    # Starts the station
    # @rbs interval: Float -- queue polling interval in seconds (default: 0.01)
    # @rbs threads: Integer -- number of threads to use (default: self.threads)
    # @rbs return: void
    def start: (?interval: Float, ?threads: Integer) -> void

    # Stops the station
    # @rbs return: void
    def stop: () -> void

    def stopping?: () -> untyped

    # Indicates if the station is running
    # @rbs return: bool
    def running?: () -> bool

    # Subscribe to a topic
    # @rbs topic: String -- topic name
    # @rbs callable: (Message) -> untyped -- callable that will process messages published to the topic
    # @rbs &block: (Message) -> untyped -- alternative way to provide a callable
    # @rbs return: self
    def subscribe: (String topic, ?callable: Message) { (Message) -> untyped } -> self

    # Unsubscribe from a topic
    # @rbs topic: String -- topic name
    # @rbs return: self
    def unsubscribe: (String topic) -> self

    # Unsubscribes all subscribers from a topic and removes the topic
    # @rbs topic: String -- topic name
    # @rbs return: self
    def unsubscribe_all: (String topic) -> self

    # Publishes a message to the queue
    #
    # @rbs topic: String | Symbol -- topic name
    # @rbs priority: Integer -- priority of the message, higher number == higher priority (default: 1)
    # @rbs timeout: Float -- seconds to wait before cancelling
    # @rbs payload: Hash[Symbol, untyped] -- message payload
    # @rbs return: Message
    def publish: (String | Symbol topic, ?priority: Integer, ?timeout: Float, **untyped payload) -> Message
  end
end
