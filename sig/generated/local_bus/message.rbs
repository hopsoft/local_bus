# Generated from lib/local_bus/message.rb with RBS::Inline

class LocalBus
  # Represents a message in the LocalBus system
  class Message
    # Constructor
    # @note Creates a new Message instance with the given topic and payload
    # @rbs topic: String -- the topic of the message
    # @rbs timeout: Float? -- optional timeout for message processing (in seconds)
    # @rbs payload: Hash -- the message payload
    def initialize: (String topic, ?timeout: Float?, **untyped payload) -> untyped

    # Metadata for the message
    # @rbs return: Hash[Symbol, untyped]
    attr_reader metadata: untyped

    # Publication representing the Async barrier and subscribers handling the message
    # @note May be nil if processing hasn't happened yet (e.g. it was published via Station)
    # @rbs return: Publication?
    attr_accessor publication: untyped

    # Unique identifier for the message
    # @rbs return: String
    def id: () -> String

    # Message topic
    # @rbs return: String
    def topic: () -> String

    # Message payload
    # @rbs return: Hash
    def payload: () -> Hash

    # Time when the message was created or published
    # @rbs return: Time
    def created_at: () -> Time

    # ID of the thread that created the message
    # @rbs return: Integer
    def thread_id: () -> Integer

    # Timeout for message processing (in seconds)
    # @rbs return: Float
    def timeout: () -> Float

    # Blocks and waits for the message to process
    # @rbs interval: Float -- time to wait between checks (default: 0.1)
    # @rbs return: void
    def wait: (?interval: Float) -> void

    # Blocks and waits for the message process then returns all subscribers
    # @rbs return: Array[Subscriber]
    def subscribers: () -> Array[Subscriber]

    # Allows pattern matching on message attributes
    # @rbs keys: Array[Symbol] -- keys to extract from the message
    # @rbs return: Hash[Symbol, untyped]
    def deconstruct_keys: (Array[Symbol] keys) -> Hash[Symbol, untyped]
  end
end
