# Generated from lib/local_bus/bus.rb with RBS::Inline

class LocalBus
  # Local in-process single threaded "message bus" with non-blocking I/O
  class Bus
    include MonitorMixin

    # Constructor
    # @note Creates a new Bus instance with specified concurrency
    # @rbs concurrency: Integer -- maximum number of concurrent tasks (default: Concurrent.processor_count)
    def initialize: (?concurrency: Integer) -> untyped

    # Maximum number of concurrent tasks that can run in "parallel"
    # @rbs return: Integer -- current concurrency value
    def concurrency: () -> Integer

    # Sets the concurrency
    # @rbs concurrency: Integer -- max number of concurrent tasks that can run in "parallel"
    # @rbs return: Integer -- new concurrency value
    def concurrency=: (untyped value) -> Integer

    # Registered topics that have subscribers
    # @rbs return: Array[String] -- list of topic names
    def topics: () -> Array[String]

    # Registered subscriptions
    # @rbs return: Hash[String, Array[callable]] -- mapping of topics to callables
    def subscriptions: () -> Hash[String, Array[callable]]

    # Subscribes a callable to a topic
    # @rbs topic: String -- topic name
    # @rbs callable: (Message) -> untyped -- callable that will process messages published to the topic
    # @rbs &block: (Message) -> untyped -- alternative way to provide a callable
    # @rbs return: self
    # @raise [ArgumentError] if neither callable nor block is provided
    def subscribe: (String topic, ?callable: Message) { (Message) -> untyped } -> self

    # Unsubscribes a callable from a topic
    # @rbs topic: String -- topic name
    # @rbs callable: (Message) -> untyped -- subscriber that should no longer receive messages
    # @rbs return: self
    def unsubscribe: (String topic, callable: Message) -> self

    # Unsubscribes all subscribers from a topic and removes the topic
    # @rbs topic: String -- topic name
    # @rbs return: self
    def unsubscribe_all: (String topic) -> self

    # Executes a block and unsubscribes all subscribers from the topic afterwards
    # @rbs topic: String -- topic name
    # @rbs block: (String) -> void -- block to execute (yields the topic)
    def with_topic: (String topic) ?{ (?) -> untyped } -> untyped

    # Publishes a message to a topic
    #
    # @note If subscribers are rapidly created/destroyed mid-publish, there's a theoretical
    #       possibility of object_id reuse. However, this is extremely unlikely in practice.
    #
    #       * If subscribers are added mid-publish, they will not receive the message
    #       * If subscribers are removed mid-publish, they will still receive the message
    #
    # @note If the timeout is exceeded, the task will be cancelled before all subscribers have completed.
    #
    # Check the Subscriber for any errors.
    #
    # @rbs topic: String -- topic name
    # @rbs timeout: Float -- seconds to wait before cancelling (default: 300)
    # @rbs payload: Hash -- message payload
    # @rbs return: Array[Subscriber] -- list of performed subscribers (empty if no subscribers)
    def publish: (String topic, ?timeout: Float, **untyped payload) -> Array[Subscriber]
  end
end
